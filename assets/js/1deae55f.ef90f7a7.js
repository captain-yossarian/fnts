"use strict";(self.webpackChunkfnts_docs=self.webpackChunkfnts_docs||[]).push([[14],{3905:function(e,r,t){t.d(r,{Zo:function(){return l},kt:function(){return m}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function c(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?c(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=n.createContext({}),s=function(e){var r=n.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},l=function(e){var r=s(e.components);return n.createElement(u.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,c=e.originalType,u=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),f=s(t),m=o,d=f["".concat(u,".").concat(m)]||f[m]||p[m]||c;return t?n.createElement(d,i(i({ref:r},l),{},{components:t})):n.createElement(d,i({ref:r},l))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var c=t.length,i=new Array(c);i[0]=f;var a={};for(var u in r)hasOwnProperty.call(r,u)&&(a[u]=r[u]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var s=2;s<c;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2666:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return a},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return l},default:function(){return f}});var n=t(7462),o=t(3366),c=(t(7294),t(3905)),i=["components"],a={id:"currying",slug:"/concepts/currying",title:"Currying"},u=void 0,s={unversionedId:"concepts/currying",id:"concepts/currying",isDocsHomePage:!1,title:"Currying",description:'The curry function is here to help with auto-currying of variadic or fixed amount of arguments. It does not provide the "placeholder" feature like in ramda, as in JavaScripts, where placeholders are rather a syntetic feature, its cost would be to run a loop on each call of the source function\'s curried derivatives.',source:"@site/docs/concepts/currying.md",sourceDirName:"concepts",slug:"/concepts/currying",permalink:"/fnts/concepts/currying",editUrl:"https://github.com/drizzer14/fnts/docs/docs/concepts/currying.md",tags:[],version:"current",frontMatter:{id:"currying",slug:"/concepts/currying",title:"Currying"},sidebar:"default",previous:{title:"Composition",permalink:"/fnts/concepts/composition"},next:{title:"Guarding",permalink:"/fnts/concepts/guarding"}},l=[],p={toc:l};function f(e){var r=e.components,t=(0,o.Z)(e,i);return(0,c.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,c.kt)("p",null,"The ",(0,c.kt)("inlineCode",{parentName:"p"},"curry"),' function is here to help with auto-currying of variadic or fixed amount of arguments. It does not provide the "placeholder" feature like in ramda, as in JavaScripts, where placeholders are rather a syntetic feature, its cost would be to run a loop on each call of the source function\'s curried derivatives.'),(0,c.kt)("p",null,"By default it curries up to the function's ",(0,c.kt)("inlineCode",{parentName:"p"},"length")," which can be determined only if the function has a fixed amount of declared arguments without the optional ones."),(0,c.kt)("p",null,"E.g. this function will be predictably curried for up to three consecutive calls:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"function sumOfThree (a: number, b: number, c: number): number {\n  return a + b + c;\n}\n\ncurry(sumOfThree)(1)(2)(3);\n")),(0,c.kt)("p",null,"While the next one is gonna be unable to determine the amount of curries to perform, so it must be specified manually:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"function sum (...args: number[]): number {\n  return args.reduce((a, c) => a + c, 0);\n}\n\nconst sumOfThree = curry(sum, 3)(1)(2)(3);\n")),(0,c.kt)("p",null,"Curried arguments can be passed in any combinations as long as the final amount of them is given in the end and the order is preserved:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"const curriedSumOfThree = curry(sumOfThree);\n\ncurriedSumOfThree(1, 2, 3) === \ncurriedSumOfThree(1, 2)(3) === \ncurriedSumOfThree(1)(2, 3) ===\ncurriedSumOfThree(1)(2)(3);\n")),(0,c.kt)("p",null,"To allow for currying with permutations take a look at the ",(0,c.kt)("a",{parentName:"p",href:"/concepts/arguments-permutation"},"Arguments Permutation")," concept."))}f.isMDXComponent=!0}}]);