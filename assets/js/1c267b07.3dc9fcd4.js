"use strict";(self.webpackChunkfnts_docs=self.webpackChunkfnts_docs||[]).push([[426],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return f}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var a=o.createContext({}),c=function(e){var t=o.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return o.createElement(a.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),m=c(n),f=r,d=m["".concat(a,".").concat(f)]||m[f]||u[f]||i;return n?o.createElement(d,s(s({ref:t},l),{},{components:n})):o.createElement(d,s({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=m;var p={};for(var a in t)hasOwnProperty.call(t,a)&&(p[a]=t[a]);p.originalType=e,p.mdxType="string"==typeof e?e:r,s[1]=p;for(var c=2;c<i;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7337:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return a},metadata:function(){return c},toc:function(){return l},default:function(){return m}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),s=["components"],p={id:"composition",slug:"/concepts/composition",title:"Composition"},a=void 0,c={unversionedId:"concepts/composition",id:"concepts/composition",isDocsHomePage:!1,title:"Composition",description:"Composition in fnts is represented through the compose and pipe functions. Both are implemented without the overloads, which causes the types to be rather imposed than inferred.",source:"@site/docs/concepts/composition.md",sourceDirName:"concepts",slug:"/concepts/composition",permalink:"/concepts/composition",editUrl:"https://github.com/drizzer14/fnts/docs/docs/concepts/composition.md",tags:[],version:"current",frontMatter:{id:"composition",slug:"/concepts/composition",title:"Composition"},sidebar:"default",previous:{title:"Arguments Permutation",permalink:"/concepts/arguments-permutation"},next:{title:"Currying",permalink:"/concepts/currying"}},l=[],u={toc:l};function m(e){var t=e.components,n=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Composition in ",(0,i.kt)("inlineCode",{parentName:"p"},"fnts")," is represented through the ",(0,i.kt)("inlineCode",{parentName:"p"},"compose")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"pipe")," functions. Both are implemented without the overloads, which causes the types to be rather ",(0,i.kt)("em",{parentName:"p"},"imposed")," than inferred."),(0,i.kt)("p",null,"Commonly, as well as in ",(0,i.kt)("inlineCode",{parentName:"p"},"fnts"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"compose")," is used to apply a list of functions to an argument, passing the result of each application to the next one in a ",(0,i.kt)("strong",{parentName:"p"},"right to left")," order:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import compose from 'fnts/compose';\n\nconst isTwoDigits = compose(\n  (b: boolean) => b ? 'true' : 'false',\n  (s: string) => s.length === 2, // argument type imposed from the next function\n  (n: number) => `${n}`,\n); // will accept only a number as argument\n\nisTwoDigits(5) === 'false';\nisTwoDigits(14) === 'true';\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"pipe"),", on the other hand, is executed in a more familiar ",(0,i.kt)("strong",{parentName:"p"},"left to right")," order:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import pipe from 'fnts/pipe';\n\nconst isTwoDigits = pipe(\n  (n: number) => `${n}`,\n  (s: string) => s.length === 2,\n  (b: boolean) => b ? 'true' : 'false',\n);\n\nisTwoDigits(5) === 'false';\nisTwoDigits(14) === 'true';\n")),(0,i.kt)("p",null,"An important thing to note here, once again, is that there are no overloads present, so make to sure to have your functions properly typed and placed in a right order. Otherwise ",(0,i.kt)("inlineCode",{parentName:"p"},"compose")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"pipe")," will emit TypeScript errors suggesting you to correct their types."),(0,i.kt)("p",null,"But fear not, as both use the same determination algorithm for types as you'd expect: the return type of the previous function is the same as the argument type of the next one."),(0,i.kt)("p",null,"Also, it is not always reliable with generics in place, so sometimes it's a necessity to add type assertions."))}m.isMDXComponent=!0}}]);